// Generated by CoffeeScript 1.3.3
(function() {

  window.GameWorld = (function() {

    function GameWorld() {
      this.level1 = new GameLevel(0, true);
      this.level2 = new GameLevel(Math.PI / 2, false);
      this.levelOrder = [this.level1, this.level2];
      this.levelSplit = 10000;
      this.nextLevel = g.now + this.levelSplit;
      this.pickupSplit = 5000;
      this.nextPickup = g.now + this.pickupSplit + (Math.random() * this.pickupSplit);
      this.canvas = new RenderCanvas();
      this.gameOver = false;
      this.startGame = true;
      this.start = g.now;
      this.winner = null;
      this.swapZoomAdj = 0.3;
      this.themeMusic = new Audio('theme');
    }

    GameWorld.prototype.collectPickup = function(onbot) {
      this.level1.entities.remove(this.pickup1);
      this.pickup1.collected = false;
      this.level2.entities.remove(this.pickup2);
      this.pickup2.collected = false;
      switch (this.pickup1.type) {
        case 0:
          return this.swap(onbot);
        case 1:
          return this.reverse(onbot);
        case 2:
          return this.spin();
        default:
          return console.log('invalid type as you already know');
      }
    };

    GameWorld.prototype.swap = function(onbot) {
      var angleAdj;
      if (!this.swapPeriod) {
        this.swapPeriod = g.now + g.swap;
        console.log(this.swapPeriod + ' ' + g.now);
        this.targetAngle1 = this.createTargetAngle(this.levelOrder[0].angle, Math.PI / 2);
        this.targetAngle2 = this.createTargetAngle(this.levelOrder[1].angle, -(Math.PI / 2));
        return console.log(this.targetAngle1 + ' ' + this.targetAngle2);
      } else if (g.now <= this.swapPeriod) {
        this.swapZoomAdj -= 0.6 * (g.elapsed / g.swap);
        this.level1.canvas.zoom = 0.7 + Math.abs(this.swapZoomAdj);
        this.level2.canvas.zoom = 0.7 + Math.abs(this.swapZoomAdj);
        console.log(this.level1.canvas.zoom);
        angleAdj = (Math.PI / 2) * (g.elapsed / g.swap);
        this.levelOrder[0].angle += angleAdj;
        return this.levelOrder[1].angle -= angleAdj;
      } else if (g.now >= this.swapPeriod) {
        this.level1.canvas.zoom = 1;
        this.level2.canvas.zoom = 1;
        this.levelOrder.reverse();
        this.levelOrder[0].angle = this.targetAngle2;
        this.levelOrder[1].angle = this.targetAngle1;
        this.nextPickup = g.now + this.pickupSplit + (Math.random() * this.pickupSplit);
        this.swapZoomAdj = 0.3;
        delete this.swapPeriod;
        delete this.targetAngle2;
        return delete this.targetAngle1;
      }
    };

    GameWorld.prototype.reverse = function(onbot) {
      var angleAdj;
      if (!this.revPeriod) {
        this.revPeriod = g.now + g.reverse;
        console.log(this.revPeriod + ' ' + g.now);
        if (onbot) {
          this.revTarget = 0;
        } else {
          this.revTarget = 1;
        }
        this.targetAngle = this.createTargetAngle(this.levelOrder[this.revTarget].angle, Math.PI);
        return console.log(this.targetAngle);
      } else if (g.now <= this.revPeriod) {
        angleAdj = Math.PI * (g.elapsed / g.reverse);
        return this.levelOrder[this.revTarget].angle += angleAdj;
      } else if (g.now >= this.revPeriod) {
        this.levelOrder[this.revTarget].angle = this.targetAngle;
        if (this.levelOrder[this.revTarget].angle >= Math.PI * 2) {
          this.levelOrder[this.revTarget].angle = 0;
        }
        delete this.revPeriod;
        delete this.revTarget;
        delete this.targetAngle;
        return this.nextPickup = g.now + this.pickupSplit + (Math.random() * this.pickupSplit);
      }
    };

    GameWorld.prototype.createTargetAngle = function(old, adj) {
      var target;
      target = (Math.PI / 2) * Math.round((old + adj) / (Math.PI / 2));
      if (target > Math.PI * 2) {
        target = (Math.PI / 2) * Math.round((target - Math.PI * 2) / (Math.PI / 2));
      }
      return target;
    };

    GameWorld.prototype.challenge = function() {
      var angleAdj;
      if (!this.challengePeriod) {
        this.challengePeriod = g.now + g.challenge + g.challengePrep;
        this.challengePrep = g.now + g.challengePrep;
        this.targetAngle1 = this.level1.angle;
        this.targetAngle2 = this.level2.angle;
        this.themeMusic.pause();
        return this.challenge1.play();
      } else if (g.now <= this.challengePrep) {
        return 1;
      } else if (g.now <= this.challengePerio) {
        delete this.challengePrep;
        angleAdj = (Math.PI * 2 * g.challengeRot) * (g.elapsed / g.challenge);
        this.level1.angle += angleAdj;
        return this.level2.angle -= angleAdj;
      } else if (g.now >= this.challengePeriod) {
        if (!this.challengePrep) {
          return this.challengePrep = g.now + g.challengePrep;
        } else {
          this.level1.angle = this.targetAngle1;
          this.level2.angle = this.targetAngle2;
          delete this.targetAngle1;
          delete this.targetAngle2;
          delete this.challengePeriod;
          delete this.challengePrep;
          this.nextPickup = g.now + this.pickupSplit + (Math.random() * this.pickupSplit);
          this.nextChall = g.now + this.challengeSplit;
          return this.themeMusic.play();
        }
      }
    };

    GameWorld.prototype.update = function() {
      var onbot;
      g.input.update();
      if (!this.gameOver && !this.startGame) {
        if (this.nextLevel <= g.now) {
          this.level1.level++;
          this.level2.level++;
          this.nextLevel = g.now + this.levelSplit;
          this.pickupSplit -= 100;
        }
        if (this.swapPeriod) {
          this.swap();
        } else if (this.revPeriod) {
          this.reverse();
        } else {
          if (this.nextPickup && this.nextPickup <= g.now) {
            onbot = false;
            if (Math.random() > 0.5) {
              onbot = true;
            }
            if (Math.random() > 0.5) {
              this.swap(true);
            } else {
              this.reverse(onbot);
            }
          }
        }
        if (!this.level1.gameOver) {
          if (!this.challengePrep) {
            this.level1.update(g.input.isKeyDown(83));
          }
        } else if (!this.gameOver) {
          this.end = g.now;
          this.gameOver = true;
          this.winner = 2;
        }
        if (!this.level2.gameOver) {
          if (!this.challengePrep) {
            return this.level2.update(g.input.isKeyDown(76));
          }
        } else if (!this.gameOver) {
          this.end = g.now;
          this.gameOver = true;
          return this.winner = 1;
        }
      } else {
        if (g.input.isKeyNewDown(88)) {
          return this.reset = true;
        }
      }
    };

    GameWorld.prototype.draw = function() {
      this.canvas.clear();
      this.levelOrder[1].draw(this.canvas);
      this.levelOrder[0].draw(this.canvas);
      if (this.gameOver) {
        if (this.winner === 1) {
          this.canvas.context.fillStyle = '#800000';
        } else if (this.winner === 2) {
          this.canvas.context.fillStyle = '#000080';
        }
        this.canvas.context.fillRect(100, 100, 400, 400);
        $('#gameText').css('color', '#ff00ff');
        $('#uprTxt').html('WINNER!!!!');
        $('#midTxt').html('You lasted: ' + ((this.end - this.start) / 1000));
        $('#lwrTxt').html('Press X to play again');
      } else if (this.startGame) {
        $('#uprTxt').html('Press X to play');
      }
      return this.canvas.draw();
    };

    return GameWorld;

  })();

}).call(this);
